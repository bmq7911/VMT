1. 以函数为核心,没有变量的概念,但由常函数数的概念

/// 还是由变量的概念
const f32 g = f32(9.8); /// 常函数
const f32 g = y(10);
f32 x; /// 这是一个函数

x=10; ///常数也是函数

f32 y 

f32 y = func(f32 x)->x * x + 3 * x + 4;
f32 g = y( y  ) /// 这也是一个函数,g是一个函数,常函数
g(10) = y( y(10))

vec3<f32> hf=func(f32 x )->[x*x, x * sin(x), 3 * x]
hf.getX( );

template<typename T>
classf{
public:
	T func getX()->x;
	T func getY()->y;
	T func getZ()->z;
	
private:
	T x,T y,T z;
};

classf f32{
	f32 func(f32 x)->x;

};


f32 add = g(f32 x, f32 y);

f32 add = func( f32 x ){
if( x < 10 ){
	x * x  + 10;
}
else{
	x + func( f32 g ){
		g * g;
	}
}
}

/// f32 是一个类
f32 t = add( 10 )
f32 t(2) 

/*
 * 在词法分析阶段,我们得到的是Token流,每个Token流存在相关类型,但这个类型也仅仅是区分了各个词法单元是由什么样的字符组成和组成的结构,并没有语义信息
 * 在语法分析阶段,我们使用的是Token流,Token流之中的数据可能满足语法规则,但是不一定满足语义规则,所有语法分析阶段我们不应该去考虑语义信息
 * 在语义分析阶段,我们才会去关注每一个Token对于的语义信息,这时候满足语法规则的东西并不一定满足语义信息,因此在语法分析阶段不应该去考虑语义信息
 */

TMA bnf 

type_define ::= "type" type "{" type_body "}"
type_body   ::= 

function_define ::= type attribute func_name "=" func_body
type ::=id
attribute ::= id | φ
func_name ::= id

func_body ::= "func" "(" function_decl_param_list ")" -> function_stmt
		  ::= call_stmt ";"

function_decl_param_list ::= φ | decl_param_list
decl_param_list          ::= decl_param | decl_param, decl_param_list
decl_param               ::= type func_name


			  
function_stmt ::= block_stmt
              ::= expr_stmt
			  
stmt ::= block_stmt
     ::= if "(" bool_expr ")" stmt
	 ::= if "(" bool_expr ")" stmt else stmt
	 ::= while "(" bool_expr ")" stmt
	 ::= do stmt while"(" bool_expr ")" ";"
	 ::= break ";"
	 ::= continue ";"
	 ::= ";"
block_stmt ::= "{" stmt "}"

stmts ::= stmts stmt
      ::= φ
expr_stmt ::=expr ";"

call_stmt     ::= func_name "(" param_list ")" 
              ::= const_func 
		 
		 

expr ::= compute_expr
     ::= decls_expr

decls_expr ::= type idlists;
idlists    ::= ids 
           ::= ids, idlists
ids        ::= id
           ::= id "=" compute_expr

compute_expr ::= bool_expr		   
		   
/// 运算符号的优先级,这个是最低优先级,由低级到高级的过程	 
bool_expr  ::= bool_expr "or" join
           ::= join

		   
join       ::= join "and" equality
           ::= equality

		   
		   
		   
		   
equality  ::= "not" bool_unary
		  ::= bool_unary
		  
bool_unary ::= "(" bool_expr ")"
		   ::= true
		   ::= false
		   ::= bool_var
		   ::= num_bool_expr
		   
num_bool_expr ::= num_expr "==" num_expr 
              ::= num_expr "!=" num_expr 
    	      ::= num_bool_expr_second
		   
		   
		   
		   
num_bool_expr_second ::= num_expr "<" num_expr
                     ::= num_expr "<=" num_expr
			         ::= num_expr ">" num_expr
			         ::= num_expr ">=" num_expr
			  
			  
num_expr ::= num_expr "+" term
         ::= num_expr "-" term
		 ::= term
		
term ::=  term "*" unary 
     ::=  term "/" unary
     ::=  unary

unary ::= "-" unary
      ::= factor
	  
foctor ::= "(" num_expr ")"  | id | num | real | object




***********************************************************************************


for( x == 100, { sum = x+12;continue; }, {x++})
// 模板函数
if( {},{ }, { } )

while({},{})

dowhile({},{条件})

f32 f=io(){ }

f32 f =pure(f32 x){
		x * x;
	}
f32 f1 =fun(f32 x,f32 y){
		x + 2 * y;
	}

这是其中之一的代码
f1( f, 12 ) { f + 2 * 12 ;} => f32(f32 x)
f3 = f1( f, f1 ) {  f + 2 * f1; } => f32( f32 x1, f32 x2, f32 x3)
f4 = f1( f, f1(f32 x,12)){ f + 2 * f1(x,12)} => f32(f32 x1, f32 x2)


f5 = f1( f, for ){ f + 2 * for } => f32( f32 x1, bool x2, T f32, T f4 )

f5( 10, {x < 10},{ x * 12;},{x++;} ){ 10 + 2 * for( {x < 10},{x* 12;},{x++})}

f6( f32 x){
	f32 sum  =  x + 10;
	f5( sum, { x < 10}, {x * sum;}, {x ++} );
}

f32 ff=func( vec3<f32> vx){
	i32 i = 0;
	f32 sum = 0;
	for( i < vx.length(),
		{
			sum +=vx[i];
		},
		{ 
			i=i+1;
		}
	);
}

f32 a = func( f32 x, f32 y )->{ x * y;}

